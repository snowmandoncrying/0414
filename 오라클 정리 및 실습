오라클 19버전 다운받은 날짜까지 알아야하는 경우도 있다.
	권한이 다 따로따로 있다. 하나로 묶어서 리소스라는 룰로 만든 것임

	스캇에서 테이블 만들 때 프라이머리 키를 만들어야한다.
	프라이머리키는 유일한 값이기에 중복될 수 없고 null 값도 안된다. (반드시 값을 하나를 설정해야 한다)
	
  not null은 설정하면 null 을 설정할 수 없음을 의미한다.
	레코드가 있는 경우에는 not null 설정할 수 없다.


	★중요★ 레코드 추가 (외우자)

	가입할 때 명령처리, 게시판 만들 때 명령처리
	필수 처리 : not null, primary key

	오라클 : 검색 속도가 굉장히 빠르고 보안에 뛰어나다
	사람들은 특히 우리나라는 기다리는 것을 싫어하니까 컴퓨터에 무언가를 입력했다면
	바로 반응이 와야한다. 그래서 검색 속도는 아주 중요하다
	
	셀렉트 다음 : 검색할 내용 - 검색할 테이블
	셀렉트는 그저 검색하는 것일뿐 데이터가 바뀌는 것은 아니다.
	
	쿼리문 - 대입이라는 개념이 없고 추가하는 것임. (연결의 의미를 가짐)
		      값이 바뀌는 것이 아니다.

--------------------------
@ 중복 제거 - distinct 명령어 (중복된 것을 다 볼 필요는 없으니까 그럴때 사용)

select distinct 컬럼명 from 테이블명;
select distinct deptno from emp;


select distinct deptno from emp; // 부서번호 중복 제거
select distinct job from emp;   // 직무 중복 제거
-------------------------
@ 정렬 - order by

# 급여 오름차순 정렬[asc] - asc는 생략가능
select 컬럼 from 테이블 order by 컬럼;
select * from emp order by sal;

# 급여 내림차순 정렬[desc] - desc는 생략불가능
select * from emp order by sal desc; // 급여를 내림차순으로 정렬
select * from emp order by deptno, sal; // 부서별로 정렬한 후 급여별로 정렬하는 것 (상위정렬 - 하위정렬), 부서 내에서 또 급여별로 오름차순

정렬은 sql문에서 가장 마지막에 들어간다. 정렬을 많이 하는 것은 그닥 좋은건 아니다.
모든 문장에서 항상 마지막에 들어감.

select * from emp where 조건 order by deptno, sal; // 조건에 맞는 것을 정렬하겠다는 뜻
------------------------------------
@ 문자 관련 함수

# upper() - 모두 대문자 변경
# lower() - 모두 소문자 변경
# initcap() - 첫글자만 대문자로 변경

(이름, 업무 등 문자 컬럼에만 사용 - 급여 같은 숫자 컬럼에는 사용 불가)
select ename, upper(ename), lower(ename), initcap(ename) from emp; // 결과가 함수로 나옴

# length() - 문자 수 (단순히 몇 글자인지를 검색함)

select job, length(job) from emp;


# substr() - 문자 추출

// substr(job, 3) : 세 번째부터 끝까지
select substr (job, 3) from emp;

// substr(job, 3, 2) : 3번 인덱스번호부터 두 글자
select substr (job, 3, 2) from emp;	

// substr(job, -1) : 뒤에서부터 한 글자
select substr (job, -1) from emp;	

// substr(job, -3) : 뒤에서부터 세 글자
select substr (job, -3) from emp;	

// substr(job, -3, 2) : 뒤에서 세번째부터 두 글자
select substr (job, -3, 2) from emp;	


# instr() - 문자 위치를 찾아줌 (인덱스 위치 번호 : 1부터 시작)

// job 컬럼에서 'A'의 인덱스, 'A'가 없는 경우엔 0이다. 문자가 처음 나오는 위치를 알려줌
select job, instr(job, 'A') from emp;

// 시작위치를 지정 가능 - 인덱스 3번부터 검색한다. (해당 위치에서부터 검색, 앞에 두 글자는 제외)
3번부터 검색했을 때 A가 몇 번째 자리에 있는지
select job, instr(job, 'A', 3) from emp;

select job, lower(substr(job, 3)) from emp;	// 직업을 3글자 잘라낸 것을  소문자로 하겠다


# replace() - 문자 변경

select job, replace(job, 'A', '-') from emp;	// A를 다른 문자인 -로 바꾸겠다. A가 -로 바뀜

------------------------------------
실제 개발을 할 때 자바와 데이터베이스 둘다 사용하곤 한다.
그럼 어디서 하는게 좋을까? > 자바 !!
데이터베이스는 오로지 데이터를 저장하고 검색하는 것이므로 함수처리는 자바가 훨씬 빠르다!

기술마다 명확한 목적이 있다. 연산처리는 자바가 훨씬 빠름. SQL은 저장하는 것
> 그래서 목적에 맞게 사용하면 된다.

중복 제거는 명령어 처리이기에 SQL이 더 좋음! (이미 저장되어 있는 것이기에 - 요즘엔 단순해지는 SQL)

SQL 하나하나 적용해서 바꿔나가는 방식이기에 데이터가 많으면 많을수록 오래걸림
자바는 재사용을 하기에 처리속도가 빠르다 (그래서 함수같은 연산식은 여기서 사용)
------------------------


























